{
  "name": "node-ios-device",
  "description": "iOS device library",
  "version": "0.1.3",
  "author": {
    "name": "Appcelerator, Inc.",
    "email": "info@appcelerator.com"
  },
  "maintainers": [
    {
      "name": "Chris Barber",
      "email": "cbarber@appcelerator.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/appcelerator/node-ios-device.git"
  },
  "keywords": [
    "appcelerator",
    "ios",
    "iphone",
    "ipad",
    "install",
    "mobiledevice",
    "mobile"
  ],
  "license": "Apache Public License v2",
  "gypfile": true,
  "main": "./ios-device",
  "engines": {
    "node": ">=0.8"
  },
  "readme": "# node-ios-device\n\nQueries connected iOS devices and installs apps.\n\n[![NPM](https://nodei.co/npm/node-ios-device.png?downloads=true&stars=true)](https://nodei.co/npm/node-ios-device/)\n\n## Prerequisites\n\nnode-ios-device requires [Node.js](http://nodejs.org/dist/) v0.8 or newer including v0.11 (unstable).\n\nCurrently, only Mac OS X is supported.\n\n## Installation\n\nFrom NPM:\n\n\tnpm install node-ios-device\n\nFrom GitHub:\n\n\tnpm install git://github.com/appcelerator/node-ios-device.git\n\nFrom Source:\n\n\tgit clone https://github.com/appcelerator/node-ios-device.git\n\tcd node-ios-device\n\tmake\n\n## Example\n\n\tvar iosDevice = require('node-ios-device');\n\n\t// get all connected iOS devices\n\tiosDevice.devices(function (err, devices) {\n\t\tconsole.log('Connected devices:');\n\t\tconsole.log(devices);\n\t});\n\n\t// continuously watch for devices to be conected or disconnected\n\tiosDevice.trackDevices(function (err, devices) {\n\t\tconsole.log('Connected devices:');\n\t\tconsole.log(devices);\n\t});\n\n\t// install an iOS app\n\tiosDevice.installApp('<device udid>', '/path/to/my.app', function (err) {\n\t\tif (err) {\n\t\t\tconsole.error(err);\n\t\t} else {\n\t\t\tconsole.log('Success!');\n\t\t}\n\t});\n\n## API\n\n### devices(callback)\n\nRetrieves an array of all connected iOS devices.\n\n* `{function} callback(err, devices)` - A function to call with the connected devices\n\t* `{null|Error} err` - An `Error` if there was a problem, otherwise `null`\n\t* `{Array<Object>} devices` - An array of Device objects\n\nDevice objects contain the following information:\n\n* `udid` - The device's unique device id (e.g. \"a4cbe14c0441a2bf87f397602653a4ac71eb0336\")\n* `name` - The name of the device (e.g. \"My iPhone\")\n* `buildVersion` - The build version (e.g. \"10B350\")\n* `cpuArchitecture` - The CPU architecture (e.g. \"armv7s\")\n* `deviceClass` - The type of device (e.g. \"iPhone\", \"iPad\")\n* `deviceColor` - The color of the device (e.g. \"black\")\n* `hardwareModel` - The device module (e.g. \"[N41AP](http://theiphonewiki.com/wiki/N41ap)\")\n* `modelNumber` - The model number (e.g. \"MD636\")\n* `productType` - The product type or model id (e.g. \"iPhone5,1\")\n* `productVersion` - The iOS version (e.g. \"6.1.4\")\n* `serialNumber` - The device serial number (e.g. \"XXXXXXXXXXXX\")\n\nThere is more data that could have been retrieved from the device, but the\nproperties above seemed the most reasonable.\n\n### trackDevices(callback)\n\nContinuously retrieves an array of all connected iOS devices. Whenever a device\nis connected or disconnected, the specified callback is fired.\n\n* `{Function} callback(err, devices)` - A function to call with the connected devices\n\t* `{null|Error} err` - An `Error` if there was a problem, otherwise `null`\n\t* `{Array<Object>} devices` - An array of Device objects\n\nReturns a function to discontinue tracking:\n\n\tvar off = iosDevice.trackDevices(function (err, devices) {\n\t\tconsole.log('Connected devices:');\n\t\tconsole.log(devices);\n\t});\n\n\tsetTimeout(function () {\n\t\t// turn off tracking after 1 minute\n\t\toff();\n\t}, 60000);\n\n### installApp(udid, appPath, callback)\n\nInstalls an iOS app on the specified device.\n\n* `{String} udid` - The devices udid\n* `{String} appPath` - The path to the iOS .app\n* `{Function} callback(err)` - A function to call when the install finishes\n\t* `{null|Error} err` - An `Error` if there was a problem, otherwise `null`\n\nCurrently, an `appPath` that begins with `~` is not supported.\n\nThe `appPath` must resolve to an iOS .app, not the .ipa file.\n\n## License\n\nThis project is open source and provided under the Apache Public License\n(version 2). Please make sure you see the `LICENSE` file included in this\ndistribution for more details on the license.  Also, please take notice of the\nprivacy notice at the end of the file.\n\nThis project contains `mobiledevice.h` from https://bitbucket.org/tristero/mobiledeviceaccess\nand is available under public domain.\n\n#### (C) Copyright 2012-2013, [Appcelerator](http://www.appcelerator.com/) Inc. All Rights Reserved.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/appcelerator/node-ios-device/issues"
  },
  "_id": "node-ios-device@0.1.3",
  "dist": {
    "shasum": "4497273eaf7e780a4c68dae3c09ceacb81a2adb6"
  },
  "_from": "node-ios-device@~0.1.3",
  "_resolved": "https://registry.npmjs.org/node-ios-device/-/node-ios-device-0.1.3.tgz"
}
